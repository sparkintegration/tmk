set_ifndef ::swig::EXCLUDE_LANGS {}
set_ifndef ::swig::JAVA_PACKAGE ""

set_ifndef ::swig::CPP_MODE 0

set_ifndef ::swig::FLAGS {}

array set ::swig::COPY_DESTS {}

array set ::swig::PATTERNS {}
set ::swig::PATTERNS(java) {*.java}
set ::swig::PATTERNS(python) {*.py}
set ::swig::PATTERNS(csharp) {*.cs}

proc java_package {package} {
    set ::swig::JAVA_PACKAGE $package
}

proc swig_target {langs files} {
    
    if {![info exists c::COMPILER]} {
        if { ![tmk::cleaning] } {
            log_msg "Note: cannot use Swig module since no C compiler is configured for this OS/architecture."
        }
        return
    }

    foreach lang $langs {
        if {[lcontains $::swig::EXCLUDE_LANGS $lang]} {
            continue
        }
        set_ifndef ::swig::${lang}::CFLAGS {}
        set_ifndef ::swig::${lang}::LDFLAGS {}
        set_ifndef ::swig::${lang}::LIBPATH {}
        set_ifndef ::swig::${lang}::LIBS {}
        
        foreach file $files {
            
            eval set flags \$::swig::${lang}::CFLAGS
            eval set libs \$::swig::${lang}::LIBS
            eval set libpaths \$::swig::${lang}::LIBPATH
            eval set ldflags \$::swig::${lang}::LDFLAGS
            set link_ldflags [::link::ld_flags]
            
            foreach flag $ldflags {
                lappend link_ldflags $flag
            }
            
            set swigflags $::swig::FLAGS
            foreach dir [concat $::PROJROOT $::PROJ_LOCATIONS] {
                lappend swigflags -I$dir
            }

            if {$lang == "java" && $::swig::JAVA_PACKAGE != ""} {
                lappend swigflags -package
                lappend swigflags $::swig::JAVA_PACKAGE
            }
            
            if {$lang == "python"} {
                lappend swigflags -threads
            }
            
            set filedest ${file}_wrap_$lang.c
            if {$::swig::CPP_MODE != 0} {
                lappend swigflags -c++
                set filedest ${file}_wrap_$lang.cpp
            }
            
            set rule { cmd $::swig::SWIG -$lang $swigflags -o [file join [tmk_output_dir] $lang $filedest] ${file}.i }
            target ${lang}/$filedest $file.i [subst -nocommands $rule]
            
            if {$::swig::CPP_MODE == 0} {
                set cflags [::c::default_flags]
                foreach flag $flags {
                    lappend cflags $flag
                }
                lappend cflags -I[pwd]
                foreach dir [concat $::PROJROOT $::PROJ_LOCATIONS] {
                    lappend cflags -I$dir
                }
                lremove cflags -Werror ;# required to build Python 2.5 stuff
                ::c::make_obj ${lang}/$filedest {} [subst {{$cflags}}] undef
            } else {
                set cflags [::cxx::default_flags]
                foreach flag $flags {
                    lappend cflags $flag
                }
                lappend cflags -I[pwd]
                foreach dir [concat $::PROJROOT $::PROJ_LOCATIONS] {
                    lappend cflags -I$dir
                }
                lremove cflags -Werror ;# required to build Python 2.5 stuff
                ::cxx::make_obj ${lang}/$filedest {} [subst {{$cflags}}] undef
            }
            
            set def_libspec [::link::default_libspec]
            set additional_libspec [::link::libspec create \{$libpaths\} \{$libs\} \{\} \{\}]
            
            set libtarget [::link::make_shlib $lang/[::swig::${lang}::libname $file] [subst {${file}.o ${lang}/${file}_wrap_$lang.o}] \
                [::link::libspec merge $def_libspec $additional_libspec] [subst {{$link_ldflags}}] undef]
                
            build $libtarget
            
            set dests {}
            if {[info exists ::swig::COPY_DESTS($lang)]} {
                set dests $::swig::COPY_DESTS($lang)
            }
            
            set copyrule {
                foreach dest {$dests} {
                    eval file mkdir \$dest
                    eval file copy -force -- [file join [tmk_output_dir] $lang [::swig::${lang}::libname $file]] \$dest
                    eval file copy -force -- [glob -nocomplain -directory [file join [tmk_output_dir] $lang] -- \
                        $::swig::PATTERNS($lang)] \$dest
                }
            }
            
            target copylib_$lang $libtarget [subst -nocommands $copyrule]
            build copylib_$lang
        }
    }
}
