#    Title: Java Language Module

module { dep }

# alias java::PROJLIBS to dep::MODULE_PROJLIBS(java)
upvar #0 ::dep::MODULE_PROJLIBS(java) PROJLIBS

if {![info exists COMPILER]} {
    if { ![::tmk::cleaning] } {
        log_msg "Note: cannot use Java module since no Java compiler is configured for this OS/architecture."
    }
    return
}

#    Variable: FLAGS
#        Set the compiler flags
set_ifndef FLAGS {}

#    Variable: PATTERNS
#        File suffixes that mark Java code files
set_ifndef PATTERNS { *.java }

#    Variable: DETECT
#        Automatically detect Java files
set_ifndef DETECT 1

#    Variable: EXTRA_SOURCES
#        Extra external source files to be included in the compilation; glob
#        expressions can be used in the file names
set_ifndef EXTRA_SOURCES    {}

#    Variable: MAKE_LIBJAR
#        Make a library jar containing this directory's classes and those that
#        it depends on
set_ifndef MAKE_LIBJAR    1

#    Variable: LIB_JARNAME
#        The name to assign to the directory's library jar; a default name based
#        on the project directory will be used if this is not specified
set_ifndef LIB_JARNAME    ""

#    Variable: RESOURCES
#        {glob_pattern location} pairs of resources to include in the jar file.
#        Resources will be searched for in the current directory and those of
#        immidiate PROJLIBS.  The location value is the directory within the jar
#        where the resource is to be put.
set_ifndef RESOURCES    {}

#    Variable: EXCLUDE_RESOURCES
#        Glob patterns of resources to exclude from the jar, this will be used
#        to filter the resources found using <RESOURCES>
set_ifndef EXCLUDE_RESOURCES    {}

#    Variable: SYSLIBS
#        Jar files to be included in any executable jars built
set_ifndef SYSLIBS    {}

set __executables    {}
set __class_targets    {}

when_target { osx } {
    module { bundle }
    set ::bundle::AUTO 0
}

# return the actual chosen compiler 
proc get_compiler {} {
    return $::java::COMPILER
}

# return complete list of compiler flags (compiler-specific and general)
proc default_flags {} {
    return $::java::FLAGS
}

proc java_output_dir {} {
    return [file join $::tmk::outputDirPrefix java]
}

proc java_lib_class_output_dir {} {
    return [file join [::java::java_output_dir] lib_classes]
}

proc java_exe_class_output_dir { name } {
    return [file join [::java::java_output_dir] ${name}_classes]
}

proc filename_class { shortname } {
    return "${shortname}.class"
}

proc filename_jar { shortname } {
    return "${shortname}.jar"
}

proc filename_manifest { shortname } {
    return "${shortname}.manifest"
}

proc java_jar_input_dir { name } {
    if { $::TARGET_ARCH == "android" } {
        return [file join [tmk_output_dir] ${name}_jar]
    }
    return [file join [::java::java_output_dir] ${name}_jar]
}

proc java_jar_output_dir {} {
    if { $::TARGET_ARCH == "android" } {
        return [tmk_output_dir]
    }
    return [::java::java_output_dir]
}

proc has_library_sources {} {
    return [lcontains $::java::__class_targets [file join [::java::java_output_dir] lib_built]]
}

# auto-detect which source files will become executables and reads the package path
proc get_src_info { src executable package_path } {
    upvar $executable exe
    upvar $package_path pkg_path
    set pkg_path ""
    
    read_file $src txt
    #eat c-style comments
    regsub -all {\/\*.*?\*\/} $txt "" txt
    
    set exp {^(?!.*(\/\/))\s*public\s+static\s+void\s+main\s*\(.*\)}
    set exe [regexp -line -- $exp $txt]
    
    set exp {^(?!.*(\/\/))\s*package\s+(\S+)\s*;}
    if {[regexp -line -- $exp $txt match sub1]} {
        set pkg_path $sub1
    }
}

proc get_classpath {} {
    set deps [::dep::get_dependencies java]
    set classpath [list [::java::java_lib_class_output_dir]]
    foreach dep $deps {
        set dir [file join $::PROJROOT $dep]
        if { [file isdirectory [file join $dir [::java::java_output_dir]]] } {
            lappend classpath [file join $dir [::java::java_output_dir] [::java::filename_jar [unique_lib_name $dep [file tail $dep]]]]
        }
    }
    lconcat classpath $::java::SYSLIBS
    return $classpath
}

proc collect_resources { name destination } {
    set deps [::dep::get_dependencies java]
    
    # add syslibs
    set resources [lmap $::java::SYSLIBS [concat list \$ITEM $destination]]
    
    # add other projlibs
    foreach dep $deps {
        set dir [file join $::PROJROOT $dep]
        if { [file isdirectory [file join $dir [::java::java_output_dir]]] } {
            lappend resources [list [file join $dir [::java::java_output_dir] [::java::filename_jar [unique_lib_name $dep [file tail $dep]]]] $destination]
        }
    }
    
    # add other resources
    foreach dep [concat $deps $::SUBDIR] {
        set dir [file join $::PROJROOT $dep]
        foreach r $::java::RESOURCES {
            set src [lindex $r 0]
            set dst [lindex $r 1]
            set files [rglob $src $dir]
            lconcat resources [lmap $files [concat list \[file join $dir \$ITEM\] \[file join $destination $dst\]]]
        }
    }
    
    # remove excluded items
    foreach excl $::java::EXCLUDE_RESOURCES {
        set resources [lfilter $resources [concat !\[string match "${excl}" \[lindex \$ITEM 0\]\]]]
    }
    
    # add local classes
    if { [::java::has_library_sources] } {
        lappend resources [list [::java::java_lib_class_output_dir] $destination]
    }
    set exe_class_targets $::java::__class_targets
    lremove exe_class_targets [file join [::java::java_output_dir] lib_built]
    foreach exe $exe_class_targets {
        if { [string match */${name}_built $exe] } {
            lappend resources [list [::java::java_exe_class_output_dir $name] $destination]
        }
    }
    
    # collect resources
    foreach r $resources {
        set src [lindex $r 0]
        set dst [lindex $r 1]
        file mkdir $dst
        if { [file isdirectory $src] } {
            set command [list cp -Rf]
            set command [concat $command [glob ${src}/*] $dst]
            uplevel \#0 cmd $command
        } elseif { [string tolower [file extension $src]] == ".jar" } {
            ::java::[::java::get_compiler]::extract_jar $src $dst
            file delete -force [file join $dst META-INF] 
        } else {
            file copy -force -- $src $dst
        }
    }
}

proc get_extra_sources {} {
    set extras {}
    foreach src $::java::EXTRA_SOURCES {
        lconcat extras [glob -nocomplain -- [file join $::PROJROOT $src]]
    }
    return $extras
}

proc make_classes {srcs {flags_expr undef}} {
    # default values
    if {$flags_expr == "undef"} {
        set flags_expr {[::java::default_flags]}
    }
    
    set exe_srcs {}
    set lib_srcs {}
    foreach src $srcs {
        set stubname [lindex [file split [file rootname $src]] end]
        ::java::get_src_info $src is_executable package_path
        if { $is_executable } {
            if { $package_path != "" } {
                set fqname "${package_path}.${stubname}"
            } else {
                set fqname $stubname
            }
            lappend ::java::__executables $fqname
            lappend exe_srcs $src
        }
        lappend lib_srcs $src
    }
    lconcat lib_srcs [::java::get_extra_sources]
    set lib_classes [lmap $lib_srcs {::java::filename_class [file rootname $ITEM]}]
    
    set rule {
        set classpath [::java::get_classpath]
        set c {$current_cls}
        set s {$current_src}
        if {[catch {::java::[::java::get_compiler]::compile_class \$c \$s \$classpath $flags_expr $output_dir} result]} {
            file delete -force -- \$TARGET
            return -code error "\${result}."
        }
        write_file \$TARGET s
    }
    
    if { [llength $lib_srcs] > 0 } {
        set current_src $lib_srcs
        set current_cls $lib_classes
        set output_dir [::java::java_lib_class_output_dir]
        set lib_tgt [file join [::java::java_output_dir] lib_built]
        target $lib_tgt $lib_srcs [subst -nocommands $rule]
        build $lib_tgt
        lappend ::java::__class_targets $lib_tgt
    }
    
    set i 0
    foreach current_src $exe_srcs {
        set name [lindex $::java::__executables $i]
        set current_cls [::java::filename_class [file rootname $current_src]]
        set output_dir [::java::java_exe_class_output_dir $name]
        set exe_tgt [file join [::java::java_output_dir] ${name}_built]
        target $exe_tgt $current_src [subst -nocommands $rule]

        if { [llength $lib_srcs] > 0 } {
            depend $exe_tgt $lib_tgt
        }
        build $exe_tgt
        lappend ::java::__class_targets $exe_tgt
        incr i
    }
}

proc make_library_jar { name {manifest ""} } {
    set jar [file join [::java::java_jar_output_dir] [::java::filename_jar $name]]
    set rule {
        set dir [::java::java_jar_input_dir $name]
        ::java::collect_resources $name \$dir
        if {[catch {::java::[::java::get_compiler]::create_jar \$TARGET \$dir "${manifest}"} result]} {
            file delete -force -- \$TARGET
            return -code error "\${result}."
        }
    }
    target $jar $::java::__class_targets [subst -nocommands $rule]
    
    if { [llength $::java::SYSLIBS] > 0 } {
        depend $jar $::java::SYSLIBS
    }
    depend $jar [::dep::get_dependencies java]
    return $jar
}

proc make_library { {name ""} } {
    set def_name [unique_lib_name $::SUBDIR $::DIRTAIL]
    
    if { $name != "" } {
        set jar [::java::make_library_jar $name]
        set linkname [::java::filename_jar $def_name]
        set link_tgt [file join [::java::java_output_dir] $linkname]
        
        set rule {
            set owd [pwd]
            cd [::java::java_jar_output_dir]
            file delete -force -- $linkname
            file link $linkname [::java::filename_jar $name]
            cd \$owd
        }
        target $link_tgt $jar [subst -nocommands $rule]
        build $link_tgt
    } else {
        build [::java::make_library_jar $def_name]
    }
}

proc make_exe_jar { name } {
    set manifest [file join [::java::java_output_dir] [::java::filename_manifest $name]]
    set manifest_rule {
        if {[catch {::java::[::java::get_compiler]::create_exe_manifest \$TARGET $name} result]} {
            file delete -force -- \$TARGET
            return -code error "\${result}."
        }
    }
    target $manifest {} [subst -nocommands $manifest_rule]
    
    set jar [::java::make_library_jar $name $manifest]
    depend $jar $manifest
    return $jar
}

proc make_exe { name } {
    set jar [::java::make_exe_jar $name]
    build $jar
    
    when_target { osx } {
        set plist_rule {
            set infoPlist [open \$TARGET w]
            puts \$infoPlist "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>"
            puts \$infoPlist "<!DOCTYPE plist PUBLIC \\"-//Apple Computer//DTD PLIST 1.0//EN\\" \\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\\">"
            puts \$infoPlist "<plist version=\\"1.0\\">"
            puts \$infoPlist "<dict>"
            puts \$infoPlist "    <key>CFBundleName</key>                        <string>%SHORT_NAME%</string>"
            puts \$infoPlist "    <key>CFBundleDevelopmentRegion</key>        <string>English</string>"
            puts \$infoPlist "    <key>CFBundleExecutable</key>                <string>JavaApplicationStub</string>"
            puts \$infoPlist "    <key>CFBundleGetInfoString</key>            <string>%DESCRIPTION%</string>"
            puts \$infoPlist "    <key>CFBundleIconFile</key>                    <string>%ICON%</string>"
            puts \$infoPlist "    <key>CFBundleIdentifier</key>                <string>%IDENTITY_ROOT%.%SHORT_NAME%</string>"
            puts \$infoPlist "    <key>CFBundleInfoDictionaryVersion</key>    <string>6.0</string>"
            puts \$infoPlist "    <key>CFBundlePackageType</key>                <string>APPL</string>"
            puts \$infoPlist "    <key>CFBundleShortVersionString</key>        <string>%VERSION%</string>"
            puts \$infoPlist "    <key>CFBundleSignature</key>                <string>%SIGNATURE%</string>"
            puts \$infoPlist "    <key>CFBundleVersion</key>                    <string>%INTERNAL_VERSION%</string>"
            puts \$infoPlist "    <key>NSHumanReadableCopyright</key>         <string>© %YEAR% %OWNER%</string>"
            puts \$infoPlist "    <key>NSJavaRoot</key>                        <string>Contents/Resources/Java</string>"
            puts \$infoPlist "    <key>Java</key>                                <dict>"
            puts \$infoPlist "                                                    <key>ClassPath</key>"
            puts \$infoPlist "                                                    <array>"
            puts \$infoPlist "                                                        <string>\\\$JAVAROOT/[::java::filename_jar $name]</string>"
            puts \$infoPlist "                                                    </array>"
            puts \$infoPlist "                                                    <key>JVMVersion</key>    <string>1.5+</string>"
            puts \$infoPlist "                                                    <key>MainClass</key>    <string>${name}</string>"
            puts \$infoPlist "                                                    <key>VMOptions</key>    <string></string>"
            puts \$infoPlist "                                                </dict>"
            puts \$infoPlist "    <key>NSJavaPath</key>                        <array>"
            puts \$infoPlist "                                                    <string>[::java::filename_jar $name]</string>"
            puts \$infoPlist "                                                </array>"
            puts \$infoPlist "</dict>"
            puts \$infoPlist "</plist>"
            close \$infoPlist
        }
        set plist_template ${name}.plist.template
        target $plist_template $jar [subst -nocommands $plist_rule]
        
        array set bundle_info {}
        set bundle_info(EXES)        { /System/Library/Frameworks/JavaVM.framework/Versions/Current/Resources/MacOS/JavaApplicationStub }
        set bundle_info(APPNAME)    $name
        set bundle_info(PLIST)        $plist_template
        set bundle_info(ICON)        [file join $::tmk::dir modules GenericJavaApp.icns]
        set bundle_info(RESOURCES)    [list [list $jar Java]]
        
        set bndl [::bundle::make_bundle bundle_info]
        depend $bndl $plist_template
        depend $bndl $jar
        build $bndl
    }
}

eval_after {
    # call compiler's init function (if extant and not already called)
    if {[info commands ::java::${java::COMPILER}::init] != {}} {
        if {[info vars ::java::${java::COMPILER}::IS_INITIALIZED] == {}} {
            ::java::${java::COMPILER}::init
            variable ::java::${java::COMPILER}::IS_INITIALIZED "1"
        }
    }

    # auto-detect java source files by file patterns?
    if $::java::DETECT {
        foreach pat $::java::PATTERNS {
            set srcs [glob -nocomplain $pat]
            if { $srcs != {} } {
                ::java::make_classes $srcs
            }
        }
    }
    
    if { $::java::MAKE_LIBJAR && [::java::has_library_sources] } {
        ::java::make_library $::java::LIB_JARNAME
    }

    foreach exe $::java::__executables {
        ::java::make_exe $exe
    }
}
